name: 🚀 Déploiement manuel

on:
  workflow_dispatch:
    inputs:
      type:
        description: "Type de référence"
        required: true
        default: "tag"
        type: choice
        options:
          - tag
          - branche
          - commit
      reference:
        description: "Référence à déployer"
        required: true

jobs:
# devenu obsolète à la disparition du front dans ce workflow et required true de la référence, mais je laisse pour moment
  inputs_validation:
    name: Validation des inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validation
        run: |
          echo "Vérification qu'au moins un tag / commit / branche est renseigné"
          echo "${{ inputs.reference }}" | grep -P '^.+$'
      - name: Transformation de la référence
        run: |
          if [ "${{ inputs.type }}" = "tag" ]; then
            REF_STR="refs/tags/${{ inputs.reference }}"
          elif [ "${{ inputs.type }}" = "branche" ]; then
            REF_STR="refs/heads/${{ inputs.reference }}"
          elif [ "${{ inputs.type }}" = "commit" ]; then
            REF_STR="${{ inputs.reference }}"
          else
            echo "Type de référence inconnu"
            exit 1
          fi
          echo "REF_STR=$REF_STR" >> $GITHUB_ENV

  deploy:
    name: Déploiement
    runs-on: ubuntu-latest
    needs: inputs_validation

    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}

    steps:
      - name: Chargement des secrets
        run: |
          echo "SSH_USER=$SSH_USER" >> $GITHUB_ENV
          echo "SSH_HOST=$SSH_HOST" >> $GITHUB_ENV
          echo "SSH_PORT=$SSH_PORT" >> $GITHUB_ENV
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV

      - name: Configuration clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets['SSH_PK'] }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SSH_PORT -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Déploiement backend
        id: deployment-back
        run: |
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            set -e
            echo '📦 Création backup' && \
            rm -rf $DEPLOY_PATH/app.bak && \
            mv $DEPLOY_PATH/app $DEPLOY_PATH/app.bak && \
            mkdir $DEPLOY_PATH/app && \
            echo '📦 Création OK' && \
            echo '♻️ Mise à jour repository' && \
            cd $DEPLOY_PATH/code && \
            git fetch && \
            git reset --hard $REF_STR && \
            git clean -f && \
            echo '♻️ Mise à jour OK' && \
            echo '🛠️ Build release' && \
            /home/$SSH_USER/.cargo/bin/cargo build --release && \
            echo '🛠️ Build OK' && \
            echo '📲 Mise à jour backend' && \
            cp -r ./target/release/* $DEPLOY_PATH/app/ && \
            echo '📲 Mise à jour OK' && \
            echo '🚀 Restart backend' && \
            ${{ secrets['RESTART_CMD'] }}
            echo '🚀 Restart OK'
          "

      - name: Nettoyage des backups
        if: steps.deployment-back.outcome == 'success'
        run: |
          echo "🛰️ Envoi des backups en orbite..."
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            rm -rf $DEPLOY_PATH/app.bak
          "
          echo "🛰️ Envoi OK"
