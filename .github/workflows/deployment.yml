name: üöÄ D√©ploiement manuel Back
# + Front

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environnement de d√©ploiement"
        required: true
        default: "STAGING"
        type: choice
        options:
          - STAGING
          - PRODUCTION
      back_ref:
        description: "Tag ou commit du backend"
        required: false
      # front_ref:
      #   description: "Tag ou commit du frontend"
      #   required: false

jobs:
  inputs_validation:
    name: validation des inputs
    runs-on: ubuntu-latest
    steps:
      - name: validation
        run: |
          echo "V√©rification qu'au moins un tag / commit est renseign√©"
          echo "${{ inputs.back_ref }}" | grep -P '^.+$'

  build_test:
    name: build & tests
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: build
        run: cargo build --verbose
      - name: test
        run: cargo test --verbose

  deploy:
    name: d√©ploiement
    runs-on: ubuntu-latest
    env:
      BACK_REPO: git@github.com:skewnart/passmanager-back.git
      # FRONT_REPO: git@github.com:skewnart/passmanager-front.git

    steps:
      - name: chargement des secrets
#        id: load-secrets
        run: |
          echo "SSH_USER=${{ secrets['SSH_USER'] }}" >> $GITHUB_ENV
          echo "SSH_HOST=${{ secrets['SSH_HOST'] }}" >> $GITHUB_ENV
          echo "SSH_PORT=${{ secrets['SSH_PORT'] }}" >> $GITHUB_ENV
          echo "SSH_KEY=${{ secrets['SSH_PK'] }}" >> $GITHUB_ENV
          echo "DEPLOY_BACK=${{ secrets[format('{0}_BACKEND_PATH', inputs.environment)] }}" >> $GITHUB_ENV
          echo "DEPLOY_FRONT=${{ secrets[format('{0}_FRONTEND_PATH', inputs.environment)] }}" >> $GITHUB_ENV

      - name: configuration cl√© SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: clonage & build backend
        run: |
          git clone --depth 1 --branch ${{ inputs.back_ref }} $BACK_REPO back
          cd back
          cargo build --release
          cd ..
          tar czf back.tar.gz -C back/target/release .

      # - name: üì¶ Cloner et builder le frontend Svelte
      #   run: |
      #     git clone --depth 1 --branch ${{ inputs.front_ref }} $FRONT_REPO front
      #     cd front
      #     npm install
      #     npm run build
      #     cd ..
      #     tar czf front.tar.gz -C front/build .

      - name: d√©ploiement backend
        run: |
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT"
            set -e
            echo 'Backup back'
            rm -rf $DEPLOY_BACK.bak
            cp -r $DEPLOY_BACK $DEPLOY_BACK.bak || true
            rm -rf $DEPLOY_BACK
            mkdir -p $DEPLOY_BACK
          "
          scp -P $SSH_PORT back.tar.gz $SSH_USER@$SSH_HOST:/tmp/back.tar.gz
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            tar xzf /tmp/back.tar.gz -C $DEPLOY_BACK
            sudo ${{ secrets[format('{0}_RESTART_BACKEND_CMD', inputs.environment)] }}
          "

      # - name: üöÄ D√©ployer frontend
      #   id: deploy_front
      #   continue-on-error: true
      #   run: |
      #     ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      #       set -e
      #       echo 'üß© Backup front'
      #       rm -rf $DEPLOY_FRONT.bak
      #       cp -r $DEPLOY_FRONT $DEPLOY_FRONT.bak || true
      #       rm -rf $DEPLOY_FRONT
      #       mkdir -p $DEPLOY_FRONT
      #     "
      #     scp -P $SSH_PORT front.tar.gz $SSH_USER@$SSH_HOST:/tmp/front.tar.gz
      #     ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      #       tar xzf /tmp/front.tar.gz -C $DEPLOY_FRONT
      #       sudo systemctl restart myapp-front-${{ inputs.environment }}
      #     "

      # - name: üõë Rollback backend si frontend √©choue
      #   if: steps.deploy_front.outcome == 'failure'
      #   run: |
      #     echo "‚ùå Le frontend a √©chou√©. Restauration du backend..."
      #     ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      #       rm -rf $DEPLOY_BACK
      #       mv $DEPLOY_BACK.bak $DEPLOY_BACK
      #       sudo systemctl restart myapp-back-${{ inputs.environment }}
      #     "
      #     exit 1

      - name: üßπ Nettoyage des backups (si succ√®s)
        # if: steps.deploy_front.outcome == 'success'
        run: |
          echo "‚úÖ D√©ploiement r√©ussi. Suppression des backups..."
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            rm -rf $DEPLOY_BACK.bak
          "