name: üöÄ D√©ploiement manuel Back
# ! + Front

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environnement de d√©ploiement"
        required: true
        default: "STAGING"
        type: choice
        options:
          - STAGING
          - PRODUCTION
      back_ref:
        description: "Branche / Tag / Commit du backend"
        required: false
      # ! front_ref:
      #   ! description: "Tag ou commit du frontend"
      #   ! required: false

jobs:
  inputs_validation:
    name: Validation des inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validation
        run: |
          echo "V√©rification qu'au moins un tag / commit / branche est renseign√©"
          echo "${{ inputs.back_ref }}" | grep -P '^.+$'

  # build_test:
  #   name: build & tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Build
  #       run: cargo build --verbose
  #     - name: Test
  #       run: cargo test --verbose

  deploy:
    name: D√©ploiement
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      DEPLOY_BACK: ${{ secrets[format('{0}_BACKEND_PATH', inputs.environment)] }}
      DEPLOY_FRONT: ${{ secrets[format('{0}_FRONTEND_PATH', inputs.environment)] }}

    steps:
      - name: Chargement des secrets
        run: |
          echo "SSH_USER=$SSH_USER" >> $GITHUB_ENV
          echo "SSH_HOST=$SSH_HOST" >> $GITHUB_ENV
          echo "SSH_PORT=$SSH_PORT" >> $GITHUB_ENV
          echo "DEPLOY_BACK=$DEPLOY_BACK" >> $GITHUB_ENV
          echo "DEPLOY_FRONT=$DEPLOY_FRONT" >> $GITHUB_ENV

      - name: Configuration cl√© SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets['SSH_PK'] }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SSH_PORT -H $SSH_HOST >> ~/.ssh/known_hosts
      # echo "Host $SSH_HOST
      #   IdentityFile ~/.ssh/id_rsa" > ~/.ssh/config

      # ! - name: üì¶ Cloner et builder le frontend Svelte
      # !  run: |
      # !    git clone --depth 1 --branch ${{ inputs.front_ref }} $FRONT_REPO front
      # !    cd front
      # !    npm install
      # !    npm run build
      # !    cd ..
      # !    tar czf front.tar.gz -C front/build .

      - name: D√©ploiement backend
        id: deployment-back
        run: |
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            set -e
            echo 'üì¶ Archivage ancienne version' && \
            rm -rf $DEPLOY_BACK/app.bak && \
            mv $DEPLOY_BACK/app $DEPLOY_BACK/app.bak && \
            mkdir $DEPLOY_BACK/app && \
            echo 'üì¶ Archivage OK' && \
            echo '‚ôªÔ∏è Mise √† jour repository' && \
            cd $DEPLOY_BACK/code && \
            git checkout ${{ inputs.back_ref }} && \
            git pull && \
            echo '‚ôªÔ∏è Mise √† jour OK' && \
            echo 'üõ†Ô∏è Build release' && \
            /home/$SSH_USER/.cargo/bin/cargo build --release && \
            echo 'üõ†Ô∏è Build OK' && \
            echo 'üì≤ Mise √† jour backend' && \
            cp -r ./target/release/* $DEPLOY_BACK/app/ && \
            echo 'üì≤ Mise √† jour OK' && \
            echo 'üöÄ Restart backend' && \
            sudo ${{ secrets[format('{0}_RESTART_BACKEND_CMD', inputs.environment)] }}
            echo 'üöÄ Restart OK'
          "

      # !- name: üöÄ D√©ployer frontend
      # !  id: deploy_front
      # !  continue-on-error: true
      # !  run: |
      # !    ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      # !      set -e
      # !      echo 'üß© Backup front'
      # !      rm -rf $DEPLOY_FRONT.bak
      # !      cp -r $DEPLOY_FRONT $DEPLOY_FRONT.bak || true
      # !      rm -rf $DEPLOY_FRONT
      # !      mkdir -p $DEPLOY_FRONT
      # !    "
      # !    scp -P $SSH_PORT front.tar.gz $SSH_USER@$SSH_HOST:/tmp/front.tar.gz
      # !    ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      # !      tar xzf /tmp/front.tar.gz -C $DEPLOY_FRONT
      # !      sudo systemctl restart myapp-front-${{ inputs.environment }}
      # !    "

      # !- name: üõë Rollback backend si frontend √©choue
      # !  if: steps.deploy_front.outcome == 'failure'
      # !  run: |
      # !    echo "‚ùå Le frontend a √©chou√©. Restauration du backend..."
      # !    ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      # !      rm -rf $DEPLOY_BACK
      # !      mv $DEPLOY_BACK.bak $DEPLOY_BACK
      # !      sudo systemctl restart myapp-back-${{ inputs.environment }}
      # !    "
      # !    exit 1

      - name: Nettoyage des backups
        if: steps.deployment-back.outcome == 'success'
        run: |
          echo "üõ∞Ô∏è Envoi des backups en orbite..."
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            rm -rf $DEPLOY_BACK/app.bak
          "
          echo "üõ∞Ô∏è Envoi OK"
