name: üöÄ D√©ploiement manuel Back
# ! + Front

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environnement de d√©ploiement"
        required: true
        default: "STAGING"
        type: choice
        options:
          - STAGING
          - PRODUCTION
      back_ref:
        description: "Branche du backend"
        required: false
      # ! front_ref:
      #   ! description: "Tag ou commit du frontend"
      #   ! required: false

jobs:
  inputs_validation:
    name: Validation des inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validation
        run: |
          echo "V√©rification qu'au moins un tag / commit est renseign√©"
          echo "${{ inputs.back_ref }}" | grep -P '^.+$'

  # build_test:
  #   name: build & tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Build
  #       run: cargo build --verbose
  #     - name: Test
  #       run: cargo test --verbose

  deploy:
    name: D√©ploiement
    runs-on: ubuntu-latest
    env:
      BACK_REPO: git@github.com:skewnart/passmanager-back.git
      # ! FRONT_REPO: git@github.com:skewnart/passmanager-front.git
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      DEPLOY_BACK: ${{ secrets[format('{0}_BACKEND_PATH', inputs.environment)] }}
      DEPLOY_FRONT: ${{ secrets[format('{0}_FRONTEND_PATH', inputs.environment)] }}

    steps:
      - name: Chargement des secrets
#        ! id: load-secrets
        run: |
          echo "SSH_USER=$SSH_USER" >> $GITHUB_ENV
          echo "SSH_HOST=$SSH_HOST" >> $GITHUB_ENV
          echo "SSH_PORT=$SSH_PORT" >> $GITHUB_ENV
          echo "DEPLOY_BACK=$DEPLOY_BACK" >> $GITHUB_ENV
          echo "DEPLOY_FRONT=$DEPLOY_FRONT" >> $GITHUB_ENV

      - name: Configuration cl√© SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets['SSH_PK'] }}" >> ~/.ssh/id_rsa
          echo "${{ secrets['SSH_GITHUB_PK'] }}" >> ~/.ssh/id_rsa_github
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa_github
          echo "Host $SSH_HOST
            IdentityFile ~/.ssh/id_rsa
          Host *github*
            IdentityFile ~/.ssh/id_rsa_github" > ~/.ssh/config
          ssh-keyscan -p $SSH_PORT -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Clonage & build backend
        run: |
          git clone --depth 1 --branch ${{ inputs.back_ref }} $BACK_REPO back
          cd back
          cargo build --release --target aarch64-unknown-linux-gnu
          cd ..
          tar czf back.tar.gz -C back/target/aarch64-unknown-linux-gnu/release .

      # ! - name: üì¶ Cloner et builder le frontend Svelte
      # !  run: |
      # !    git clone --depth 1 --branch ${{ inputs.front_ref }} $FRONT_REPO front
      # !    cd front
      # !    npm install
      # !    npm run build
      # !    cd ..
      # !    tar czf front.tar.gz -C front/build .

      - name: D√©ploiement backend
        run: |
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            set -e
            echo 'Backup back'
            rm -rf $DEPLOY_BACK.bak
            mv $DEPLOY_BACK $DEPLOY_BACK.bak
            mkdir -p $DEPLOY_BACK
          "
          scp -P $SSH_PORT back.tar.gz $SSH_USER@$SSH_HOST:/tmp/back.tar.gz
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
            tar xzf /tmp/back.tar.gz -C $DEPLOY_BACK
            sudo ${{ secrets[format('{0}_RESTART_BACKEND_CMD', inputs.environment)] }}
          "

      # !- name: üöÄ D√©ployer frontend
      # !  id: deploy_front
      # !  continue-on-error: true
      # !  run: |
      # !    ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      # !      set -e
      # !      echo 'üß© Backup front'
      # !      rm -rf $DEPLOY_FRONT.bak
      # !      cp -r $DEPLOY_FRONT $DEPLOY_FRONT.bak || true
      # !      rm -rf $DEPLOY_FRONT
      # !      mkdir -p $DEPLOY_FRONT
      # !    "
      # !    scp -P $SSH_PORT front.tar.gz $SSH_USER@$SSH_HOST:/tmp/front.tar.gz
      # !    ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      # !      tar xzf /tmp/front.tar.gz -C $DEPLOY_FRONT
      # !      sudo systemctl restart myapp-front-${{ inputs.environment }}
      # !    "

      # !- name: üõë Rollback backend si frontend √©choue
      # !  if: steps.deploy_front.outcome == 'failure'
      # !  run: |
      # !    echo "‚ùå Le frontend a √©chou√©. Restauration du backend..."
      # !    ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      # !      rm -rf $DEPLOY_BACK
      # !      mv $DEPLOY_BACK.bak $DEPLOY_BACK
      # !      sudo systemctl restart myapp-back-${{ inputs.environment }}
      # !    "
      # !    exit 1

      # - name: Nettoyage des backups
        # ! if: steps.deploy_front.outcome == 'success'
      #   run: |
      #     echo "‚úÖ D√©ploiement r√©ussi. Suppression des backups..."
      #     ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "
      #       rm -rf $DEPLOY_BACK.bak
      #     "
